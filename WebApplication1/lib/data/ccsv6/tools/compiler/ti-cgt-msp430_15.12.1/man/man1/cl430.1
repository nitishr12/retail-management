.bd B 3
.TH cl430 1 "Feb 06, 2016" "TI Tools" "TI Code Generation Tools"
.SH NAME
cl430 - Compiler
.SH SYNOPSIS
.B cl430
[
.I options
] [
.I file(s)
]
.SH DESCRIPTION
The compiler is an optimizing C/C++ compiler that accepts C++ as well as American National Standards Institute (ANSI) standard C source code and produces target specific object code.  This compiler builds object code directly from your C++ program source.  There is no intermediate C version of the program.

The 
.B Optimizing C Compiler User's Guide
discusses the characteristics and limitations of this C/C++ compiler, as well as the languages, features and keywords supported.
.SH OPTIONS
The following options are accepted by this tool:
.SS Processor Options:
.SS
.TP
--code_model=small,large
Specify the code memory model to be used.  Small code model only allows code to be located in the low 64k of memory while large code model allows code to be located anywhere in memory.  Large-code model has a slight performance penalty.  This option only applies to MSP430X devices.
.TP
--data_model=small,large,restricted
Specify the data memory model to be used.  Small data model only allows data to be located in the low 64k of memory.  Large data model allows data to be located anywhere in memory, but there is an associated performance penalty.  The restricted model allows data to be located anywhere in memory, but individual objects cannot be greater than 64k in size.  Restricted data model has less performance overhead than the large data model and is the default.  This option only applies to MSP430X devices.
.TP
--near_data=globals,none
Indicates whether certain types of data are guaranteed to be in the near 64k of memory and allows the compiler to optimize performance based on this information.  Globals indicates that all global and static variables will be located in near memory.  This option only applies to MSP430X devices. When not specified by the user, the compiler defaults to globals
.TP
-v=msp,mspx
Specify silicon core version. When not specified by the user, the compiler defaults to msp
.SS Optimization Options:
.SS
.TP
-mf[=0-5]
Control speed vs. size trade-offs in optimization.  A value of 5 indicates fully optimizing for speed with a potentially large code size penalty, while a value of 0 indicates fully optimizing for size. Values between 0 and 5 indicate trade-offs between the two extremes. The argument to the option is optional, and if not specified it will default to: 4
.TP
-O[=off,0,1,2,3,4]
Set compiler optimization level.

Level 0 includes register optimizations.  Level 1 adds local optimizations. Level 2 further adds global optimizations. Level 3 further adds interprocedure optimizations. Level 4 adds whole program optimizations. Level 4 must be passed to the linker for the optimizations to take affect. The argument to the option is optional, and if not specified it will default to: 2
.TP
--use_hw_mpy[=16,32,F5,none]
Replaces all references to the default integer/long multiply routines with the hardware multiplier version of the multiply routine. Additionally inlines hardware multiply calls for --opt_level>=0 and --opt_for_speed>=4.  16 uses the 1xx/2xx/4xx family 16-bit hardware multiplier, 32 uses the 4xx 32-bit hardware multiplier, and F5 uses the 5xx/6xx family 32-bit hardware multiplier. The argument to the option is optional, and if not specified it will default to: 16
.SS Include Options:
.SS
.TP
-I=dir
Add the specified dir(ectory) to the #include file search path list.
.TP
--preinclude=filename
Include the source code of the indicated file at the beginning of the compilation. This can be used to establish standard macro definitions, etc. The file name is searched for in the directories on the include search list. The files are processed in the order in which they were specified.
.SS ULP Advisor Options:
.SS
.TP
--advice:power[=RULE]
Enable validation of ULP power rules. The argument to the option is optional, and if not specified it will default to: all
.TP
--advice:power_severity=error,warning,remark,suppress
Set error category for ULP power rules.
.SS Advice Options:
.SS
.TP
--advice:hw_config[=RULE]
Check hardware configuration settings for device such as FRAM settings. The argument to the option is optional, and if not specified it will default to: all
.TP
--advice:hw_config_severity=error,warning,remark,suppress
Set error category for hardware configuration checks.
.SS Control Options:
.SS
.TP
-c
Disable linking, overriding -z (if used).
.TP
-h
Show usage information.  When followed by another option or a phrase display that option's detailed information, or search for options related to that phrase.
.TP
-n
Compile only; do not assemble
.TP
-z[=arguments]
After compiling all the source files, perform a link and pass all the options following this option to the linker.
.SS Advanced Debug Options:
.SS
.TP
-g
Enable full symbolic DWARF debugging in the generated object or out file. [Same as -gw]
.TP
-gw
Enable full symbolic DWARF debugging in the generated object or out file. [Same as -g]
.TP
-mn[=on,off]
Optimize fully in the presence of debug (DEPRECATED) The argument to the option is optional, and if not specified it will default to: on
.TP
--symdebug:dwarf_version=2,3,4
Specify DWARF version
.TP
--symdebug:keep_all_types
Keep referenced type info (default for elf w/ debug)
.TP
--symdebug:none
Disable debug and suppress all symbolic debug information from being included in the generated object or out file.
.TP
--symdebug:skeletal
Enable symbolic debug information for program analysis. (DEPRECATED)
.SS Language Options:
.SS
.TP
--c++03
Compile program in C++03 mode.
.TP
--c89
Compile program in ANSI C89 mode.
.TP
--c99
Compile program in C99 mode.
.TP
--exceptions
Enable C++ exception handling
.TP
--extern_c_can_throw
This option is only supported under EABI for table-driven exception handling (TDEH). This option is valid only when `--exceptions` is also present. This option allows a function defined in C++ with extern `C` linkage to propagate exceptions.
.TP
-fg
Treat C files as C++ files
.TP
--float_operations_allowed=all,32,64,none
Control the acceptable precision of floating point operations. The default is all.
.TP
--gcc
This option enables the support for GCC extensions.  This feature is incompatible with strict ANSI mode.
.TP
--keep_unneeded_statics
The parser, by default, will remark about and then remove any unreferenced static variables.  This option will keep the parser from deleting unreferenced static variables and any static functions that are, in turn referenced by these variables.
.TP
-pc
Enable parser support for multibyte character sequences in comments, string literals, and character constants.
.TP
-pe
Enable support for embedded C++
.TP
--pending_instantiations=#
The number of template instantiations that may be in progress at any given time. Use 0 to specify an unlimited number.
.TP
-pi
Ignore the inline keyword while parsing.
.TP
-pk
Enable K & R C compatibility.
.TP
-pl
Output raw listing to .rl file
.TP
-pm
Enable program mode compilation.
.TP
-pn
Disable intrinsic functions in the parser.
.TP
-pr
Enable relaxed ANSI source parsing mode.
.TP
-ps
Enable strict ANSI source parsing mode.  Any source violating strict ANSI guidelines will generate a parsing error.
.TP
-px
Output xref listing to .crl file
.TP
-rtti
Support C++ run-time type information
.TP
--static_template_instantiation
All template entities are instantiated as needed in the file.  The instantiations are given internal (static) linkage.
.SS Parser Preprocessing Options:
.SS
.TP
-ppa
This option instructs the compiler to additionally continue compilation of the source file (rather than exiting) after generating a pre-processing .pp output file such as those generated by -ppd (dependencies) -ppi (included files), or -ppm (macros).
.TP
-ppc
Only preprocess the source file(s) and then stop; maintain source comments in the output.
.TP
-ppd[=filename]
Generate a dependency list for the source file into the file <filename>.pp and then exit.  Optionally, name the output file.  The output will include all files included in the source file as well as any of the files included.  Also see the -ppa option to continue compilation after generating the dependency list (similar to gcc).
.TP
-ppi[=filename]
Generate an include list for the source file into the file <filename>.pp and then exit.  Optionally, name the output file.  The output will include only those files directly included by the source file.   Also see the -ppa option to continue compilation after generating the include list (similar to gcc).
.TP
-ppl
Only preprocess the source file(s) and then stop; maintain #line directives in the output..
.TP
-ppm[=filename]
Generate a list of predefined and user defined macros for the source file into the file <filename>.pp and then exit.  Optionally, name the output file. The output will include only those files directly included by the source file.   Also see the -ppa option to continue compilation after generating the macro list (similar to gcc).
.TP
-ppo
Only preprocess the source file(s) and then stop.
.SS Predefined Symbols Options:
.SS
.TP
-D=NAME[=value]
Pre-define a symbol with the id 'NAME', optionally setting it's contents to 'value'.
.TP
--llopt=0,1,2,3
Run LLVM with specified optimization level
.TP
-U=NAME
Undefine the symbol with the id 'NAME'.
.TP
-W=-W[warning_argument]
Forwards a warning argument to Clang
.SS Diagnostic Options:
.SS
.TP
--compiler_revision
Print out the compiler release revision and exit.
.TP
--diag_wrap[=on,off]
Set diagnostic messages to wrap at 79 columns (on) or not (off). The argument to the option is optional, and if not specified it will default to: on
.TP
-pdb
Line buffer diagnostic output to reduce message mixing when compiling in parallel.
.TP
-pdel=count
Set error limit to <count>
.TP
-pden
Emit the diagnostic identifier numbers along with diagnostic messages.  These identifiers can be used with options such as -pds to suppress a specific diagnostic.
.TP
-pdew
Treat warnings as errors
.TP
-pdf
Write diagnostics to an .err file instead of the standard output.  The file name with be the same as the source file but with an .err extension.
.TP
-pdr
Issue remarks, which are normally suppressed.
.TP
-pds=id
Suppress diagnostic <id>
.TP
-pdse=id
Treat diagnostic <id> as error
.TP
-pdsr=id
Treat diagnostic <id> as remark
.TP
-pdsw=id
Treat diagnostic <id> as warning
.TP
-pdv
Enable verbose diagnostic information from the parser, including the source line of the error and an indicator of the error position within the line.
.TP
-pdw
Suppress all parser warnings.
.TP
-q
Suppress common compiler non-diagnostic output.  Remarks, errors and warnings will still be generated, as well as feature specific status.
.TP
-qq
Suppress all compiler non-diagnostic output.  Remarks, errors and warnings will still be generated.
.TP
--section_sizes[=on,off]
Output section size summary information for code, const, and data. The argument to the option is optional, and if not specified it will default to: on
.TP
--tool_versions
Print version numbers for each tool [Same as -version, -versions]
.TP
--verbose
Display progress information and toolset version when executing.
.TP
-version
Print version numbers for each tool [Same as -versions, --tool_versions]
.TP
-versions
Print version numbers for each tool [Same as -version, --tool_versions]
.SS Runtime Model Options:
.SS
.TP
--common=on,off
Emit uninitialized variables as common symbols, instead of allocating them to a section. Any variables that have no conflicting requirements, such as data section pragmas, will become common symbols. Unused common blocks may be omitted by the linker to save memory at runtime.
.TP
--fp_reassoc=on,off
Set to on to allow reassociation of floating point arithmetic even in cases where the reassociation will result in a slightly different answer. When not specified by the user, the compiler defaults to off
.TP
--gen_data_subsections=on,off
Placing structs and arrays in subsections allows the linker to remove unused data at link time. If the option is not specified, the default behavior is on
.TP
--global_register=r4,r5
Reserve the specified register for use by the user.  It will not be used by the compiler.  If only reserving one global register it is preferable for performance reasons to reserve r4.
.TP
-ml
Build using a large-data model.  This allows data to be placed in memory locations above the 64k boundary and individual objects can be larger than 64k in size.  Only valid for MSP430X devices.
.TP
--plain_char=signed,unsigned
Specify how to treat plain chars (signed/unsigned) When not specified by the user, the compiler defaults to unsigned
.TP
--ramfunc[=on,off]
Indicate that each function will be run out of RAM. Functions will be placed in RAM and optimized for RAM execution. Equivalent to specifying __attribute__((ramfunc)) on all functions in the translation units compiled with this option. For additional information, see http://processors.wiki.ti.com/index.php/Ramfunc_Attribute The argument to the option is optional, and if not specified it will default to: on
.TP
--sat_reassoc=on,off
Set to on to allow reassociation of saturating arithmetic even in cases where the reassociation will cause saturation to occur differently. When not specified by the user, the compiler defaults to off
.TP
--silicon_errata=CPU12,CPU13,CPU15,CPU18,CPU19,CPU21,CPU22,CPU23,CPU40
The compiler will use workarounds and emit warnings as necessary to properly handle the specified silicon errata.
.TP
--small-enum
Enums may be char/short, instead of int
.SS Advanced Optimizations Options:
.SS
.TP
--disable_interrupts_around_hw_mpy[=on,off]
When inlining hardware multiply routines, (on) disable interrupts around the hardware multiply, or (off) leave interrupts enabled during hw mpy. The argument to the option is optional, and if not specified it will default to: on
.TP
-ma
Assume called funcs create hidden aliases (rare)
.TP
-oi[=size]
Specify threshold for automatic inlining
.TP
-on=0-2
Set the optimizer information file level, or disable with 0. Level 1 includes basic information.  Level 2 includes detailed information.  The file will be created in the assembly directory if a custom asm directory is specified on the command line otherwise it will be created in the object file directory.
.TP
-op=0-3
Specify assumptions to make about function calls when optimizing.

Level 0 (-op0) indicates that the module has functions that are called from other modules.

Level 1 (-op1) indicates that the module does not have functions that are called by other modules but has global variables that are modified in other modules.

Level 2 (-op2) indicates that the module does not have functions that are called or globals that are modified by other modules.

Level 3 (-op3) indicates that the module has functions that are called by other modules but does not have globals that are modified by other modules.
.TP
--remove_hooks_when_inlining
Remove the entry and exit hooks from the bodies of inlined functions.
.TP
--single_inline
Inline function that are called only once.  Will inline these functions even if auto inlining has been turned off (-oi0)
.SS Entry/Exit Hook Options:
.SS
.TP
--entry_hook[=hook_function_name]
Insert this call at entry to each function The argument to the option is optional, and if not specified it will default to: __entry_hook
.TP
--entry_parm=name,address,none
Pass caller's name or address to entry hook
.TP
--exit_hook[=hook_function_name]
Insert this call at exit from each function The argument to the option is optional, and if not specified it will default to: __exit_hook
.TP
--exit_parm=name,address,none
Pass caller's name or address to exit hook
.SS Feedback and Analysis Options:
.SS
.TP
--analyze=codecov,callgraph
Generate analysis information about code coverage or call graph information in the form of CSV files.  This information can then be read and interpreted by other tools.  For example, the cache layout tool, clt6x, can be used to interpret the call graph information and produce a preferred function order that can be incorporated into the application link.  The compiler can only generate one kind of analysis information for a given invocation of the compiler.
.TP
--analyze_only
Generate analysis only; do not continue compilation. This option is used in combination with the --analyze option to instruct the compiler to halt the compilation after it has completed the generation of analysis information requested in the --analyze option.
.TP
--gen_profile_info
Instrument the object code that is generated for a compilation with path profiling information.  The compiler will annotate the code that is generated for an application so that, when executed, the application can generate information about which code paths were executed and how often.  This profile data can then be used by subsequent compiles to analyze code coverage or call graph information to assist with subsequent development.
.TP
--use_profile_info[=filelist]
This option is used in combination with the --analyze option to generate analysis information about code coverage or call graph information in the form of CSV files.  This information can then be read and interpreted by other tools.  For example, the cache layout tool, clt6x, can be used to interpret the call graph information and produce a preferred function order that can be incorporated into the application link.  The compiler can only generate one kind of analysis information for a given invocation of the compiler.
.SS Library Function Assumptions Options:
.SS
.TP
-ol0
File redefines an RTS library function.
.TP
-ol1
File contains an RTS library function.
.TP
-ol2
File does not define any RTS library func (def.)
.TP
--printf_support=nofloat,minimal,full
The printf and scanf families of functions are large because they provide complex formatting capabilities, which may not be required in typical embedded applications.  Use this option to reduce code size by eliminating features.  This option must be specified at link time.

Use '--printf_support=nofloat' to exclude support for printing and scanning floating values.  All format specifiers except %f, %F, %g, %G, %e, and %E are supported.

Use '--printf_support=minimal' to exclude support for width and precision flags and all format specifiers except %%, %d %o, %c, %s, and %x.
.SS Assembler Options:
.SS
.TP
-aa
Generate absolute listing file
.TP
-ac
Symbol names are not case-significant
.TP
-ad=NAME[=value]
Pre-define the assembly symbol NAME, optionally setting its contents to 'value'.
.TP
-ahc=filename
Simulate source '.copy filename'
.TP
-ahi=filename
Simulate source '.include filename'
.TP
-al
Generate listing file
.TP
-apd[=filename]
Generate assembly dependency information.  Optionally, name the assembly dependency file.
.TP
-api
Generate first-level assembly include file list
.TP
-as
Keep local symbols in output file
.TP
-au=NAME
Undefine assembly symbol NAME
.TP
-ax
Generate cross reference file
.TP
-k
Keep the generated assembly language (.asm) file
.TP
-s
Generate interlisted assembly file
.TP
-ss
Generate C source interlisted assembly file
.SS File Type Specifier Options:
.SS
.TP
-fa=filename
File is an assembly file (default for .asm)
.TP
-fc=filename
File is a C file (default for .c/no ext)
.TP
-fo=filename
File is an object file (default for .obj)
.TP
-fp=filename
File is a C++ file (default for .C .cpp .cc)
.SS Directory Specifier Options:
.SS
.TP
-fb=dir
Absolute listing directory (default is .obj dir)
.TP
-fe=filename
Compilation output file name, can override --obj_directory
.TP
-ff=dir
Listing/xref file directory (default is .obj dir)
.TP
-fr=dir
Object file directory (default is .)
.TP
-fs=dir
Assembly file directory (default is .)
.TP
-ft=dir
Temporary file directory (default is .)
.TP
--pp_directory=dir
Place preprocessor output files in specified directory.  The directory must exist prior to compiler invocation.
.SS Default File Extensions Options:
.SS
.TP
-ea=.ext
Extension for assembly files (default is .asm)
.TP
-ec=.ext
Extension for C files (default is .c)
.TP
-eo=.ext
Extension for object files (default is .obj)
.TP
-ep=.ext
Extension for C++ files (default is .cpp)
.TP
-es=.ext
Extension for listing files (default is .lst)
.SS Command Files Options:
.SS
.TP
-@=filename
Read additional compile options the specified filename.
.SS MISRA-C:2004 Options:
.SS
.TP
--check_misra[=RULE]
Enable verification of the MISRA-C:2004 rules, 'Guidelines for the use of the C language in critical systems.' For information on MISRA-C, see http://www.misra.org.uk.  MISRA and MISRA-C are trademarks of MIRA Ltd. The argument to the option is optional, and if not specified it will default to: all
.TP
--misra_advisory=error,warning,remark,suppress
Set diagnostic severity level for the MISRA advisory class of rules.  See the --check_misra option for further information.
.TP
--misra_required=error,warning,remark,suppress
Set the diagnostic severity level for the MISRA required class of rules.  See the --check_misra option for further information.
.SH EXIT STATUS
The following error values are returned:
.PD 0
.TP 10
.B 0
Successful completion.
.TP
.B >0
Unsuccessful completion; an error occured.
.PD
.SH COPYRIGHT
.TP
Copyright (c) 2016, Texas Instruments, Inc.
